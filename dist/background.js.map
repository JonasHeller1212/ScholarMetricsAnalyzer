{"version":3,"file":"background.js","sources":["../src/background.ts"],"sourcesContent":["// Store for profile data\nlet currentProfileData: any = null;\n\n// Listen for messages from the content script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.type === 'PROFILE_DATA') {\n    currentProfileData = request.data;\n    console.log('Received profile data:', currentProfileData);\n    // Calculate additional metrics\n    const metrics = calculateMetrics(currentProfileData);\n    // Store the complete data\n    chrome.storage.local.set({ scholarMetrics: metrics });\n    sendResponse({ success: true });\n  }\n\n  if (request.type === 'GET_METRICS') {\n    chrome.storage.local.get(['scholarMetrics'], (result) => {\n      sendResponse(result.scholarMetrics || null);\n    });\n    return true; // Required for async response\n  }\n});\n\nfunction calculateMetrics(data: any) {\n  // Sort citations in descending order for h-index calculation\n  const citations = data.publications\n    .map((pub: any) => parseInt(pub.citations) || 0)\n    .sort((a: number, b: number) => b - a);\n\n  // Calculate h-index\n  let hIndex = 0;\n  for (let i = 0; i < citations.length; i++) {\n    if (citations[i] >= i + 1) {\n      hIndex = i + 1;\n    } else {\n      break;\n    }\n  }\n\n  // Calculate g-index\n  let gIndex = 0;\n  let sum = 0;\n  for (let i = 0; i < citations.length; i++) {\n    sum += citations[i];\n    if (sum >= Math.pow(i + 1, 2)) {\n      gIndex = i + 1;\n    } else {\n      break;\n    }\n  }\n\n  // Calculate i10-index\n  const i10Index = citations.filter(c => c >= 10).length;\n\n  // Calculate total citations\n  const totalCitations = citations.reduce((a, b) => a + b, 0);\n\n  // Group citations by year\n  const citationsByYear: Record<string, number> = {};\n  data.publications.forEach((pub: any) => {\n    const year = pub.year;\n    if (year && !isNaN(year)) {\n      citationsByYear[year] = (citationsByYear[year] || 0) + (parseInt(pub.citations) || 0);\n    }\n  });\n\n  return {\n    name: data.name,\n    affiliation: data.affiliation,\n    hIndex,\n    gIndex,\n    i10Index,\n    totalCitations,\n    citationsPerYear: citationsByYear\n  };\n}"],"names":["currentProfileData","request","sender","sendResponse","metrics","calculateMetrics","result","data","citations","pub","a","b","hIndex","i","gIndex","sum","i10Index","c","totalCitations","citationsByYear","year"],"mappings":"AACA,IAAIA,EAA0B,KAG9B,OAAO,QAAQ,UAAU,YAAY,CAACC,EAASC,EAAQC,IAAiB,CAClE,GAAAF,EAAQ,OAAS,eAAgB,CACnCD,EAAqBC,EAAQ,KACrB,QAAA,IAAI,yBAA0BD,CAAkB,EAElD,MAAAI,EAAUC,EAAiBL,CAAkB,EAEnD,OAAO,QAAQ,MAAM,IAAI,CAAE,eAAgBI,EAAS,EACvCD,EAAA,CAAE,QAAS,EAAA,CAAM,CAChC,CAEI,GAAAF,EAAQ,OAAS,cACnB,cAAO,QAAQ,MAAM,IAAI,CAAC,gBAAgB,EAAIK,GAAW,CAC1CH,EAAAG,EAAO,gBAAkB,IAAI,CAAA,CAC3C,EACM,EAEX,CAAC,EAED,SAASD,EAAiBE,EAAW,CAEnC,MAAMC,EAAYD,EAAK,aACpB,IAAKE,GAAa,SAASA,EAAI,SAAS,GAAK,CAAC,EAC9C,KAAK,CAACC,EAAWC,IAAcA,EAAID,CAAC,EAGvC,IAAIE,EAAS,EACb,QAASC,EAAI,EAAGA,EAAIL,EAAU,QACxBA,EAAUK,CAAC,GAAKA,EAAI,EADYA,IAElCD,EAASC,EAAI,EAOjB,IAAIC,EAAS,EACTC,EAAM,EACV,QAASF,EAAI,EAAGA,EAAIL,EAAU,SAC5BO,GAAOP,EAAUK,CAAC,EACdE,GAAO,KAAK,IAAIF,EAAI,EAAG,CAAC,GAFQA,IAGlCC,EAASD,EAAI,EAOjB,MAAMG,EAAWR,EAAU,OAAYS,GAAAA,GAAK,EAAE,EAAE,OAG1CC,EAAiBV,EAAU,OAAO,CAACE,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EAGpDQ,EAA0C,CAAA,EAC3C,OAAAZ,EAAA,aAAa,QAASE,GAAa,CACtC,MAAMW,EAAOX,EAAI,KACbW,GAAQ,CAAC,MAAMA,CAAI,IACLD,EAAAC,CAAI,GAAKD,EAAgBC,CAAI,GAAK,IAAM,SAASX,EAAI,SAAS,GAAK,GACrF,CACD,EAEM,CACL,KAAMF,EAAK,KACX,YAAaA,EAAK,YAClB,OAAAK,EACA,OAAAE,EACA,SAAAE,EACA,eAAAE,EACA,iBAAkBC,CAAA,CAEtB"}